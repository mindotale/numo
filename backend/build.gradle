plugins {
    id 'java'
    id 'idea'
    id 'jacoco'
    id 'com.diffplug.spotless' version '6.6.1'
    id 'org.springframework.boot' version '2.6.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.barfuin.gradle.jacocolog' version '1.0.1'
}

group 'dev.challenge'
version '1.0.0'
sourceCompatibility = '11'

bootJar {
    archiveFileName = "dev-challenge.jar"
}

repositories {
    mavenCentral()
}

jacoco {
    toolVersion = "0.8.7"
    reportsDirectory.set(file("$buildDir/reports/jacoco"))
}

ext {
    queryDslVersion = dependencyManagement.managedVersions['com.querydsl:querydsl-apt']
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springdoc:springdoc-openapi-ui:1.5.7'
    implementation 'com.vladmihalcea:hibernate-types-52:2.20.0'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    implementation 'com.querydsl:querydsl-jpa'
    runtimeOnly 'org.postgresql:postgresql:42.5.0'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jpa"
    annotationProcessor 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testRuntimeOnly 'com.h2database:h2'
}

test {
    useJUnitPlatform()
    environment 'SPRING_PROFILES_ACTIVE', 'test'

    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat 'full'
    }
}

def excludedClassesFromCoverage = ['**/*Config.class', '**/NumoManagementApplication.class', '**/dto', '**/config', '**/model', '**/entity', '**/mapper', '**/filter', '**/controller/advice']

jacocoTestReport {
    getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/*.exec"))
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/reports/jacoco/jacocoReportHtml")
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: excludedClassesFromCoverage)
        }))
    }
}

spotless {
    java {
        googleJavaFormat()
    }
}

compileJava.dependsOn 'spotlessApply'
check.dependsOn 'spotlessApply'
